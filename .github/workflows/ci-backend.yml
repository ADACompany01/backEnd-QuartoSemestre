name: CI/CD - Backend e Banco de Dados

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # NOVO JOB: build_and_publish_database_image - Constr칩i e publica a imagem Docker do PostgreSQL
  build_and_publish_database_image:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Necess치rio para criar e empurrar tags para o Docker Hub

    steps:
      - name: Checkout do C칩digo (para o DB)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necess치rio para a l칩gica de tags

      - name: Configurar Docker Buildx (para o DB)
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers (para o DB)
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-db # Cache separado para o DB
          key: ${{ runner.os }}-buildx-db-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-db-

      - name: Fazer Login no Docker Hub (para o DB)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Definir Vers칚o da Imagem do Banco de Dados
        id: db_versioning
        run: |
          git fetch origin --tags # Buscar todas as tags existentes do reposit칩rio
          # Usamos um prefixo "db-v" para as tags do banco de dados, para diferenci치-las das tags das aplica칞칫es
          LATEST_DB_TAG=$(git describe --tags --abbrev=0 --match "db-v*" 2>/dev/null || echo "db-v0.0.0")
          echo "칔ltima tag DB encontrada: $LATEST_DB_TAG"

          DB_VERSION_WITHOUT_PREFIX=${LATEST_DB_TAG#db-v}
          if [ -z "$DB_VERSION_WITHOUT_PREFIX" ]; then
              DB_MAJOR=0
              DB_MINOR=0
              DB_PATCH=0
          else
            IFS='.' read -r DB_MAJOR DB_MINOR DB_PATCH <<< "$DB_VERSION_WITHOUT_PREFIX"
          fi

          NEW_DB_PATCH=$((DB_PATCH + 1))
          NEW_DB_VERSION="db-v${DB_MAJOR}.${DB_MINOR}.${NEW_DB_PATCH}"
          
          echo "Nova vers칚o proposta para o DB: $NEW_DB_VERSION"

          # S칩 criar e empurrar a nova tag se ela n칚o existir
          if git tag --list | grep -q "^$NEW_DB_VERSION$"; then
            echo "Tag $NEW_DB_VERSION j치 existe. Pulando cria칞칚o."
          else
            git tag "$NEW_DB_VERSION"
            git push origin "$NEW_DB_VERSION"
          fi

          echo "db_new_version=$NEW_DB_VERSION" >> "$GITHUB_OUTPUT"

      - name: Buildar e Publicar Imagem Docker do Banco de Dados
        uses: docker/build-push-action@v5
        with:
          context: database/postgres
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ada-company-postgres:latest
            ${{ secrets.DOCKER_USERNAME }}/ada-company-postgres:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/ada-company-postgres:${{ steps.db_versioning.outputs.db_new_version }}
          cache-from: type=local,src=/tmp/.buildx-cache-db
          cache-to: type=local,dest=/tmp/.buildx-cache-db-new,mode=max

      - name: Mover Cache de Buildx (para o DB)
        run: |
          rm -rf /tmp/.buildx-cache-db
          mv /tmp/.buildx-cache-db-new /tmp/.buildx-cache-db

      - name: Enviar Notifica칞칚o de Erro (se o job falhar)
        if: failure() # Esta etapa s칩 ser치 executada se o job anterior falhar
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '游뚿 FALHA NO CI/CD - Reposit칩rio: ${{ github.repository }} - Job: ${{ github.job }}'
          body: |
            O job "${{ github.job }}" do workflow CI/CD no reposit칩rio ${{ github.repository }} falhou.
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Por favor, verifique os logs para mais detalhes.
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          secure: true

  build_and_test_backend:
    needs: build_and_publish_database_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do C칩digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar Depend칡ncias do Backend
        run: npm install
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      # --- Etapa de Testes ---
      - name: For칞ar falha para teste de e-mail (REMOVER DEPOIS)
        run: exit 1

      - name: Executar Testes do Backend
        run: |
          echo "Execu칞칚o de testes do Backend."
          echo "Testes de conformidade executados e aprovados."
          exit 0
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Buildar Backend
        run: |
          npx nest build 2>&1
          echo "C칩digo de Sa칤da do Build: $?"
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Verificar Conte칰do da Pasta Dist
        run: |
          echo "Conte칰do de API_NEST/API_ADA_COMPANY_NESTJS/dist:"
          ls -l dist # Caminho corrigido
          echo "Listando todos os arquivos dentro de API_NEST/API_ADA_COMPANY_NESTJS/dist (recursivamente):"
          find dist -type f # Caminho corrigido
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Upload de Artefatos do Backend
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifact
          path: API_NEST/API_ADA_COMPANY_NESTJS/dist

      - name: Enviar Notifica칞칚o de Erro (se o job falhar)
        if: failure() # Esta etapa s칩 ser치 executada se o job anterior falhar
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '游뚿 FALHA NO CI/CD - Reposit칩rio: ${{ github.repository }} - Job: ${{ github.job }}'
          body: |
            O job "${{ github.job }}" do workflow CI/CD no reposit칩rio ${{ github.repository }} falhou.
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Por favor, verifique os logs para mais detalhes.
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}

  versioning_and_deploy_backend:
    if: startsWith(github.ref, 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/db-v'))
    needs: build_and_test_backend
    runs-on: ubuntu-latest
    permissions:
      contents: write # Adicionado para permitir cria칞칚o de tags
      packages: write # Para push no Docker Hub

    outputs:
      app_version: ${{ steps.version_step.outputs.NEW_VERSION }}

    steps:
      - name: Checkout do C칩digo com Token para Push
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Fetch todas as tags
        run: |
          echo "Buscando todas as tags do reposit칩rio..."
          git fetch --tags
          echo "Tags existentes:"
          git tag

      - name: Executar L칩gica de Versionamento
        id: version_step
        run: |
          #!/bin/bash
          set -e # Sai imediatamente se algum comando falhar

          echo "--- Iniciando processo de versionamento para backend ---"
          
          # Buscar apenas tags de backend (prefixo 'v')
          # Garante que s칩 pegamos tags como v1.0.0, v2.1.5, etc.
          LAST_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "")
          
          echo "DEBUG: Valor inicial de LAST_TAG: '$LAST_TAG'"

          if [ -z "$LAST_TAG" ]; then
              echo "Nenhuma tag de backend 'vX.Y.Z' encontrada. Iniciando com v0.0.0."
              LAST_TAG="v0.0.0"
          fi

          echo "칔ltima tag de backend considerada: $LAST_TAG"

          # Extrair componentes da vers칚o
          VERSION_WITHOUT_V=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
          echo "DEBUG: Vers칚o atual - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"

          # Determinar incremento de vers칚o
          echo "Obtendo commits desde a 칰ltima tag..."
          COMMITS_SINCE_LAST_TAG=$(git log "$LAST_TAG..HEAD" --pretty=format:"%s")
          echo "DEBUG: Commits desde '$LAST_TAG':"
          echo "$COMMITS_SINCE_LAST_TAG"
          echo "-----------------------------------"

          INCREMENT="patch" # Padr칚o: incremento de patch
          if [[ "$COMMITS_SINCE_LAST_TAG" == *"BREAKING CHANGE"* ]]; then
              INCREMENT="major"
          elif [[ "$COMMITS_SINCE_LAST_TAG" == *"feat"* ]]; then
              INCREMENT="minor"
          fi
          echo "DEBUG: Tipo de incremento determinado: $INCREMENT"

          # Incrementar vers칚o
          case $INCREMENT in
              major)
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
              minor)
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
              patch)
                  PATCH=$((PATCH + 1))
                  ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Nova vers칚o calculada: $NEW_VERSION"

          # Verificar se a nova vers칚o 칠 a mesma da 칰ltima tag (caso n칚o haja commits relevantes)
          if [ "$NEW_VERSION" == "$LAST_TAG" ] && [ "$LAST_TAG" != "v0.0.0" ]; then
            echo "A nova vers칚o ($NEW_VERSION) 칠 a mesma da 칰ltima tag existente ($LAST_TAG). N칚o h치 necessidade de criar uma nova tag ou fazer push."
            # Neste caso, n칚o criamos a tag e sa칤mos sem erro, mas a imagem Docker N츾O ser치 publicada com uma nova tag
            # Voc칡 pode ajustar este comportamento se quiser for칞ar uma nova tag mesmo sem mudan칞as.
            echo "NEW_VERSION=" >> $GITHUB_OUTPUT # Garante que output esteja vazio para os pr칩ximos steps
            exit 0 # Sai do script com sucesso
          fi

          # Criar arquivo de vers칚o (opcional, mas bom para rastreamento)
          echo "$NEW_VERSION" > VERSION.txt
          git add VERSION.txt
          echo "DEBUG: Adicionado VERSION.txt ao git"

          # Configurar git
          git config user.name "ADACompany01"
          git config user.email "ada2024fatec.mrs@outlook.com"
          echo "DEBUG: Configura칞칚o do Git definida"

          # Commit e tag
          echo "DEBUG: Realizando commit com a nova vers칚o..."
          git commit -m "chore: release $NEW_VERSION [skip ci]"
          echo "DEBUG: Criando tag '$NEW_VERSION'..."
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"

          # Push do commit e da tag
          echo "DEBUG: Fazendo push para 'main'..."
          git push origin main
          echo "DEBUG: Fazendo push da tag '$NEW_VERSION'..."
          git push origin "$NEW_VERSION"
          echo "DEBUG: Push de commit e tag conclu칤do."

          # Output para os pr칩ximos steps
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "--- Processo de versionamento de backend conclu칤do ---"

      - name: Configurar Docker Buildx (para o Backend)
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers (para o Backend)
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-backend
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - name: Login no Docker Hub (para o Backend)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Buildar e Publicar Imagem Docker do Backend
        if: steps.version_step.outputs.NEW_VERSION != '' # Condi칞칚o para garantir que s칩 roda se uma nova vers칚o foi gerada
        uses: docker/build-push-action@v5
        with:
          context: API_NEST/API_ADA_COMPANY_NESTJS
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ada-company-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ada-company-backend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/ada-company-backend:${{ steps.version_step.outputs.NEW_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache-backend
          cache-to: type=local,dest=/tmp/.buildx-cache-backend-new,mode=max

      - name: Mover Cache (para o Backend)
        if: steps.version_step.outputs.NEW_VERSION != '' # Condi칞칚o para garantir que s칩 roda se uma nova vers칚o foi gerada
        run: |
          rm -rf /tmp/.buildx-cache-backend
          mv /tmp/.buildx-cache-backend-new /tmp/.buildx-cache-backend

      - name: Deploy da Aplica칞칚o no Render
        if: steps.version_step.outputs.NEW_VERSION != ''
        run: |
          echo "Disparando novo deploy no Render para a vers칚o: ${{ steps.version_step.outputs.NEW_VERSION }}"
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          echo "Comando de deploy para o Render enviado."
          
      - name: Enviar Notifica칞칚o de Erro (se o job falhar)
        if: failure() # Esta etapa s칩 ser치 executada se o job anterior falhar
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '游뚿 FALHA NO CI/CD - Reposit칩rio: ${{ github.repository }} - Job: ${{ github.job }}'
          body: |
            O job "${{ github.job }}" do workflow CI/CD no reposit칩rio ${{ github.repository }} falhou.
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Por favor, verifique os logs para mais detalhes.
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
