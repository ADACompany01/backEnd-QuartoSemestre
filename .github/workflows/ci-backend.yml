name: CI Backend, Versionamento e Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código do Backend
        uses: actions/checkout@v4

      - name: Configurar Ambiente do Backend (Node.js)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar Dependências do Backend
        run: npm install
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Rodar Testes do Backend
        run: npm test
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Buildar Backend (Se aplicável)
        run: npm run build
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

  versioning_and_deploy_backend:
    needs: build_and_test_backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout do Código com Token para Push (Backend)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Executar Lógica de Versionamento e Criar Tag/Commit
        run: |
          #!/bin/bash

          # --- Lógica de Versionamento Direta no YAML ---
          MAIN_BRANCH="main"

          echo "Iniciando processo de versionamento..."

          # O script de versionamento vai rodar na raiz do repositório,
          # então, o 'VERSION.txt' será criado na raiz.
          # Se você quer que o VERSION.txt fique dentro de API_NEST/API_ADA_COMPANY_NESTJS,
          # precisaria ajustar o caminho para 'API_NEST/API_ADA_COMPANY_NESTJS/VERSION.txt'
          # e também o 'git add' para esse caminho.

          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          if [ -z "$LAST_TAG" ]; then
              echo "Nenhuma tag existente encontrada. Iniciando com v0.0.0."
              LAST_TAG="v0.0.0"
          fi
          echo "Última tag encontrada: $LAST_TAG"

          VERSION_WITHOUT_V=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Nova versão proposta: $NEW_VERSION"

          VERSION_FILE="VERSION.txt"
          echo "$NEW_VERSION" > "$VERSION_FILE" # Cria VERSION.txt na raiz do repositório
          echo "Arquivo $VERSION_FILE atualizado para $NEW_VERSION"

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          git add "$VERSION_FILE" # Adiciona o VERSION.txt da raiz
          if git diff --cached --quiet; then
              echo "Nenhuma alteração para commitar. A versão já está atualizada ou não há mudanças no VERSION.txt."
              exit 0
          fi

          COMMIT_MESSAGE="chore(release): Bump version to $NEW_VERSION [skip ci]"
          git commit -m "$COMMIT_MESSAGE"
          echo "Commit criado: $COMMIT_MESSAGE"

          git tag "$NEW_VERSION"
          echo "Tag criada: $NEW_VERSION"

          git push origin "$MAIN_BRANCH"
          git push origin "$NEW_VERSION"

          echo "Processo de versionamento concluído com sucesso!"

      - name: Deploy do Backend
        # Se o seu deploy precisa interagir com os arquivos compilados (ex: Dockerfile),
        # você pode precisar apontar para 'API_NEST/API_ADA_COMPANY_NESTJS' ou para a pasta 'dist' dentro dela.
        # Por exemplo, se seu Dockerfile está dentro de API_NEST/API_ADA_COMPANY_NESTJS:
        # run: docker build -t seu-usuario/seu-backend:${{ github.ref_name }} ./API_NEST/API_ADA_COMPANY_NESTJS
        # working-directory: API_NEST/API_ADA_COMPANY_NESTJS # Se os comandos de deploy precisam ser executados de lá
        run: |
          echo "Simulando deploy do Backend para a nova versão: $(git describe --tags --abbrev=0 2>/dev/null || echo 'N/A')"
          echo "Adicione aqui os comandos reais para deployar seu backend."

      - name: Enviar Notificação de Sucesso (Opcional - Backend)
        run: echo "Notificação de deploy de backend enviada (passo real a ser implementado se desejar)."
