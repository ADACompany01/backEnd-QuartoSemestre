name: CI Backend, Versionamento e Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: build_and_test_backend
  build_and_test_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código do Backend
        uses: actions/checkout@v4

      - name: Configurar Ambiente do Backend (Node.js)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache: 'npm'

      - name: Instalar Dependências do Backend
        run: npm install
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Rodar Testes do Backend
        run: npm test -- --passWithNoTests
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Buildar Backend (Se aplicável)
        run: npm run build
        working-directory: API_NEST/API_ADA_COMPANY_NESTJS

      - name: Upload de Artefatos do Backend (Opcional)
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifact
          path: API_NEST/API_ADA_COMPANY_NESTJS/dist

  # Job 2: versioning_and_deploy_backend
  versioning_and_deploy_backend:
    needs: build_and_test_backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    outputs:
      app_version: ${{ steps.version_step.outputs.NEW_VERSION }}

    steps:
      - name: Checkout do Código com Token para Push (Backend)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Executar Lógica de Versionamento e Criar Tag/Commit
        id: version_step
        run: |
          #!/bin/bash
          MAIN_BRANCH="main"
          echo "Iniciando processo de versionamento..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          if [ -z "$LAST_TAG" ]; then
              echo "Nenhuma tag existente encontrada. Iniciando com v0.0.0."
              LAST_TAG="v0.0.0"
          fi
          echo "Última tag encontrada: $LAST_TAG"
          VERSION_WITHOUT_V=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Nova versão proposta: $NEW_VERSION"
          VERSION_FILE="VERSION.txt"
          echo "$NEW_VERSION" > "$VERSION_FILE"
          echo "Arquivo $VERSION_FILE atualizado para $NEW_VERSION"
          git config user.name "ADACompany01"
          git config user.email "ada2024fatec.mrs@outlook.com"
          git add "$VERSION_FILE"
          if git diff --cached --quiet; then
              echo "Nenhuma alteração para commitar. A versão já está atualizada ou não há mudanças no VERSION.txt."
              exit 0
          fi
          COMMIT_MESSAGE="chore(release): Bump version to $NEW_VERSION [skip ci]"
          git commit -m "$COMMIT_MESSAGE"
          echo "Commit criado: $COMMIT_MESSAGE"
          git tag "$NEW_VERSION"
          echo "Tag criada: $NEW_VERSION"
          git push origin "$MAIN_BRANCH"
          git push origin "$NEW_VERSION"
          echo "Processo de versionamento concluído com sucesso!"

          # Adiciona a nova versão como uma saída deste passo
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT" # <--- Linha adicionada!

      # --- Etapa de Build e Push da Imagem Docker ---
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Buildar e Publicar Imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: API_NEST/API_ADA_COMPANY_NESTJS
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/seu-backend-image:latest
            ${{ secrets.DOCKER_USERNAME }}/seu-backend-image:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/seu-backend-image:${{ steps.version_step.outputs.NEW_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy da Aplicação (Placeholder)
        run: |
          echo "Simulando a etapa de deploy da imagem Docker."
          echo "A imagem ${{ secrets.DOCKER_USERNAME }}/seu-backend-image:${{ steps.version_step.outputs.NEW_VERSION }} foi publicada no Docker Hub."
          echo "AGORA VOCÊ PRECISA ADICIONAR SEUS COMANDOS DE DEPLOY REAIS AQUI NESTE BLOCO 'run:'."
          echo "Isso geralmente envolve puxar a imagem do Docker Hub e executá-la no seu ambiente de produção."

      - name: Enviar Notificação de Sucesso (Opcional - Backend)
        run: echo "Notificação de deploy de backend enviada (passo real a ser implementado se desejar)."
